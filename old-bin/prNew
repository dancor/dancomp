#!/usr/bin/env python3

# make new project with given name

from cmd_util import cmd_wait
from optparse import OptionParser
import os
import shutil

def copytree(src, dst, symlinks=False, can_exist=False):
    names = os.listdir(src)
    if not can_exist or not os.path.isdir(dst):
        os.makedirs(dst)
    errors = []
    for name in names:
        srcname = os.path.join(src, name)
        dstname = os.path.join(dst, name)
        try:
            if symlinks and os.path.islink(srcname):
                linkto = os.readlink(srcname)
                os.symlink(linkto, dstname)
            elif os.path.isdir(srcname):
                copytree(srcname, dstname, symlinks)
            else:
                shutil.copy2(srcname, dstname)
            # XXX What about devices, sockets etc.?
        except (IOError, os.error) as why:
            errors.append((srcname, dstname, str(why)))
        # catch the Error from the recursive copytree so that we can
        # continue with other files
        except Error as err:
            errors.extend(err.args[0])
    try:
        shutil.copystat(src, dst)
    except WindowsError:
        # can't copy file access times on Windows
        pass
    except OSError as why:
        errors.extend((src, dst, str(why)))
    if errors:
        raise Error(errors)

usage = ''
opt_p = OptionParser(usage)
opt_p.add_option('-t', '--template', help='which template to use')
(opts, args) = opt_p.parse_args()

if len(args) != 1:
    print('You must specify a project name.')
(name,) = args
if name.find('/') != -1:
    raise 'Bad project name: contains forward-slash!'
if os.path.exists(name):
    print('Project directory already exists.')
template = opts.template if opts.template else 'hs'

home = os.getenv('HOME')
copytree(os.path.join(home, 'p', 'templates', 'all'), name)
copytree(os.path.join(home, 'p', 'templates', template), name, can_exist=True)

os.chdir(name)

if template == 'hs':
    if name.find('_') != -1:
        print('###')
        print('### Warning: package name will differ: underscores->hyphens.')
        print('###')
        name_no_underscores = name.replace('_', '-')
    else:
        name_no_underscores = name
    cmd_wait(['sed', '-i', 's/<name>/%s/' % name, 'Makefile'])
    cmd_wait(['sed', '-i', 's/<name>/%s/' % name, 'name.cabal'])
    cmd_wait(['sed', '-i',
        's/<name_no_underscores>/%s/' % name_no_underscores, 'name.cabal'])
    cmd_wait(['mv', 'name.cabal', name + '.cabal'])
    cmd_wait(['ln', '-s', 'dist/build/%s/%s' % (name, name), name])
elif template == 'py':
    cmd_wait(['sed', '-i', 's/<name>/%s/' % name, 'setup.py'])
elif template == 'sh':
    cmd_wait(['mv', 'src/name', 'src/' + name])
elif template == 'pl':
    cmd_wait(['mv', 'src/name.pl', 'src/%s.pl' % name])

cmd_wait(['git', 'init'])
cmd_wait(['git', 'add', '.'])
cmd_wait(['git', 'commit', '-a', '-m', 'initial template for ' + name])
