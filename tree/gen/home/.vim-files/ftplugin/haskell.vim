" Add <LocalLeader>t as command to add type declarations, if ghci exists
call system ("ghc --version")
if !v:shell_error
    if !exists("*s:HSActuallyGetType")
        if v:version < 700 
            function s:HSActuallyGetType(firstword)
                if has("unix")
                    return (system('echo ":t '. a:firstword . '" | ghci -v0 -cpp -w ' . expand('%')))
                else
                    return ("No pipes possible?")
                endif
            endfunction
        else
            function s:HSActuallyGetType(firstword)
                " -cpp is wack..
                return (system('ghci -x hs -v0 -w ' . expand('%'), ':t ' . a:firstword))
            endfunction
        endif
    endif

    if !exists("*HSGetType")
        function HSGetType()
            let l:line = getline(line('.'))
            let l:firstword = matchstr(l:line, '[^[:space:]]\+')
            if l:line =~ (l:firstword . ' ::')
                return
            endif
            let l:type = s:HSActuallyGetType(l:firstword)
            let l:type = substitute(l:type, "[[:space:]]$", "", "")
            let l:previousline = getline(line('.')-1)
            if l:type =~ (l:firstword . ' ::')
                if l:previousline =~ (l:firstword . ' ::')
                    call setline(line('.')-1, l:type)
                elseif l:previousline =~ ('-- type for ' . l:firstword . ' could not be autogenerated')
                    call setline(line('.')-1, l:type)
                else
                    call append(line('.')-1, l:type)
                endif
            elseif l:previousline !~ ('-- type for ' . l:firstword . ' could not be autogenerated')
                call append(line('.')-1, '-- type for ' . l:firstword . ' could not be autogenerated')
            endif
        endfunction
    endif
    nmap _t :call HSGetType()<CR>
endif
